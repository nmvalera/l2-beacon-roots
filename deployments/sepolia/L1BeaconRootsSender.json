{
  "address": "0xB5c70f0CD8Ca5738E555FB76E9f1B82BF254fc5b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messenger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2BeaconRoots",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BeaconRootMissing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimestampInTheFuture",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimestampOutOfRing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "blockRoot",
          "type": "bytes32"
        }
      ],
      "name": "BlockRootSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getCrossDomainMessenger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getL2BeaconRoots",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "sendBlockRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCurrentBlockRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x968491abd7afb1684403fc78b30fb3d681c819d6427745bac38d0bd66f9cd853",
  "receipt": {
    "to": null,
    "from": "0xFD94B77dEf93B655b37F149d58cb3AD21743180F",
    "contractAddress": "0xB5c70f0CD8Ca5738E555FB76E9f1B82BF254fc5b",
    "transactionIndex": 62,
    "gasUsed": "336227",
    "logsBloom": "0x
    "blockHash": "0x0ee0f3b6324e29e1d0438a4898982bd44ac9d06e998acd20c129db6918a5e948",
    "transactionHash": "0x968491abd7afb1684403fc78b30fb3d681c819d6427745bac38d0bd66f9cd853",
    "logs": [],
    "blockNumber": 6758983,
    "cumulativeGasUsed": "28614717",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x58Cc85b8D04EA49cC6DBd3CbFFd00B4B8D6cb3ef",
    "0x716d304cA10a4e8f418FeFC9c4E008EDDdd752bE"
  ],
  "numDeployments": 1,
  "solcInputHash": "e2dbfeb055bcb7180044bb2e108cbea3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2BeaconRoots\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BeaconRootMissing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimestampInTheFuture\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimestampOutOfRing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockRoot\",\"type\":\"bytes32\"}],\"name\":\"BlockRootSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getCrossDomainMessenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL2BeaconRoots\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"sendBlockRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCurrentBlockRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"BlockRootSent(uint256,bytes32)\":{\"params\":{\"blockRoot\":\": The beacon chain block root at the given timestamp\",\"timestamp\":\": The timestamp of the beacon chain block\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_l2BeaconRoots\":\": The address of the L2BeaconRoots contract on the L2\",\"_messenger\":\": The address of the CrossDomainMessenger contract on the L1\"}},\"sendBlockRoot(uint256)\":{\"params\":{\"_timestamp\":\": The timestamp of the beacon chain block\"}}},\"stateVariables\":{\"BEACON_ROOTS\":{\"details\":\"https://eips.ethereum.org/EIPS/eip-4788\"},\"BEACON_ROOTS_HISTORY_BUFFER_LENGTH\":{\"details\":\"https://eips.ethereum.org/EIPS/eip-4788\"}},\"title\":\"L1BeaconRootsSender\",\"version\":1},\"userdoc\":{\"errors\":{\"BeaconRootMissing()\":[{\"notice\":\"Beacont root is missing for the given timestamp.\"}],\"TimestampInTheFuture()\":[{\"notice\":\"Timestamp is in the future\"}],\"TimestampOutOfRing()\":[{\"notice\":\"Timestamp out of range for the the beacon roots buffer ring.\"}]},\"events\":{\"BlockRootSent(uint256,bytes32)\":{\"notice\":\"Event emitted when a block root is sent to the L2The event can be emitted multiple times for the same block rootThe event can be emitted for block roots in the pastThe protocol does not guarantee that the event is emitted for every block root\"}},\"kind\":\"user\",\"methods\":{\"getCrossDomainMessenger()\":{\"notice\":\"Retrieves the address of the CrossDomainMessenger contract on the L1\"},\"getL2BeaconRoots()\":{\"notice\":\"Retrieves the address of the L2BeaconRoots contract on the L2\"},\"sendBlockRoot(uint256)\":{\"notice\":\"Sends a beacon block root to the L2Retrieves the block root from the official beacon roots contract and sends it to the L2\"},\"sendCurrentBlockRoot()\":{\"notice\":\"Sends beacon block root of the current block to the L2Retrieves the block root from the official beacon roots contract and sends it to the L2The beacon block root is for the parent beacon chain slot of the current block\"}},\"notice\":\"The L1BeaconRootsSender contract sends the beacon chain block roots to the L2BeaconRoots contract on the L2\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/L1BeaconRootsSender.sol\":\"L1BeaconRootsSender\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/src/L1BeaconRootsSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./libraries/BeaconRoots.sol\\\";\\nimport \\\"./state/BeaconRootsRingTracker.sol\\\";\\nimport \\\"./interfaces/IL1CrossDomainMessenger.sol\\\";\\nimport \\\"./interfaces/IL1BeaconRootsSender.sol\\\";\\nimport \\\"./interfaces/IL2BeaconRoots.sol\\\";\\n\\n/// @title L1BeaconRootsSender\\n/// @notice The L1BeaconRootsSender contract sends the beacon chain block roots to the L2BeaconRoots contract on the L2\\ncontract L1BeaconRootsSender is IL1BeaconRootsSender {\\n    /// @notice The OP L1CrossDomainMessenger contract\\n    address internal immutable MESSENGER;\\n\\n    /// @notice The L2BeaconRoots contract on the L2\\n    address internal immutable L2_BEACON_ROOTS;\\n\\n    /// @notice The L1 official Beacon Roots contracts storing the beacon chain block roots\\n    /// @dev https://eips.ethereum.org/EIPS/eip-4788\\n    address internal constant BEACON_ROOTS = 0x000F3df6D732807Ef1319fB7B8bB8522d0Beac02;\\n\\n    /// @notice The length of the beacon roots ring buffer.\\n    /// @dev https://eips.ethereum.org/EIPS/eip-4788\\n    uint256 internal constant BEACON_ROOTS_HISTORY_BUFFER_LENGTH = 8191;\\n\\n    /// @notice The number of seconds per slot in the beacon chain (12 seconds)\\n    uint256 internal constant BEACON_SECONDS_PER_SLOT = 12;\\n\\n    /// @notice The gas limit required for executing the L2BeaconRoots.set call on L2 varies based on whether\\n    ///         a beacon root has already been stored in the L2BeaconRoots ring buffer for the specified timestamp.\\n    ///         Most of the gas cost is due to two SSTORE operations (one for the timestamp and one for the beacon root):\\n    ///             - 20,000 gas each when writing to cold storage.\\n    ///             - 2,900 gas each when writing to warm storage.\\n    uint32 internal constant L2_BEACON_ROOTS_SET_GAS_LIMIT_WHEN_COLD = 50_000;\\n    uint32 internal constant L2_BEACON_ROOTS_SET_GAS_LIMIT_WHEN_WARM = 15_000;\\n\\n    /// @param _messenger: The address of the CrossDomainMessenger contract on the L1\\n    /// @param _l2BeaconRoots: The address of the L2BeaconRoots contract on the L2\\n    constructor(address _messenger, address _l2BeaconRoots) {\\n        MESSENGER = _messenger;\\n        L2_BEACON_ROOTS = _l2BeaconRoots;\\n    }\\n\\n    /// @inheritdoc IL1BeaconRootsSender\\n    function sendBlockRoot(uint256 _timestamp) public {\\n        uint256 currentBlockTimestamp = block.timestamp;\\n\\n        // If the _timestamp is in the futre, revert.\\n        if (_timestamp > currentBlockTimestamp) {\\n            revert TimestampInTheFuture();\\n        }\\n\\n        // If the _timestamp is not guaranteed to be within the beacon block root ring buffer, revert.\\n        if ((currentBlockTimestamp - _timestamp) >= (BEACON_ROOTS_HISTORY_BUFFER_LENGTH * BEACON_SECONDS_PER_SLOT)) {\\n            revert TimestampOutOfRing();\\n        }\\n\\n        // Retrieve the beacon block root from the official beacon roots contract\\n        bytes32 beaconRoot = _getBlockRoot(_timestamp);\\n\\n        // If the beacon root is missing, revert.\\n        if (beaconRoot == bytes32(0)) {\\n            revert BeaconRootMissing();\\n        }\\n\\n        // Send the beacon block root to the L2\\n        _send(_timestamp, beaconRoot);\\n    }\\n\\n    /// @inheritdoc IL1BeaconRootsSender\\n    function sendCurrentBlockRoot() public {\\n        uint256 currentBlockTimestamp = block.timestamp;\\n\\n        // Retrieve the beacon block root from the official beacon roots contract\\n        bytes32 beaconRoot = _getBlockRoot(currentBlockTimestamp);\\n\\n        // If the beacon root is missing, revert.\\n        if (beaconRoot == bytes32(0)) {\\n            revert BeaconRootMissing();\\n        }\\n\\n        // Send the beacon block root to the L2\\n        _send(currentBlockTimestamp, beaconRoot);\\n    }\\n\\n    /// @notice Retrieves a beacon block root from the official beacon roots contract (EIP-4788)\\n    /// @param _timestamp: The timestamp of the beacon chain block\\n    function _getBlockRoot(uint256 _timestamp) internal view returns (bytes32 blockRoot) {\\n        return BeaconRoots._get(BEACON_ROOTS, _timestamp);\\n    }\\n\\n    /// @notice Sends a beacon block root to the L2\\n    /// @param _timestamp: The timestamp of the beacon chain block\\n    /// @param _beaconRoot: The beacon chain block root at the given timestamp\\n    function _send(uint256 _timestamp, bytes32 _beaconRoot) internal {\\n        // Check whether a beacon root has already been set in the L2BeaconRoots ring buffer for the specified timestamp.\\n        // It is used to adjust the gas limit required for the L2BeaconRoots.set call on L2.\\n        // If not previously set, the timestamp is marked accordingly.\\n        bool isToBeSet = BeaconRootsRingTracker._markIfNotYetMarked(_timestamp % BEACON_ROOTS_HISTORY_BUFFER_LENGTH);\\n\\n        // If a beacon root has already been set in the L2BeaconRoots ring buffer for the specified timestamp,\\n        // a lower gas limit is used since there's no need to write to fresh storage.\\n        // Otherwise, the higher gas limit is applied for initial writes.\\n        // As more beacon roots are recorded over time, the gas limit will increasingly shift to the warm limit.\\n        // This approach reduces the L1 gas required to send beacon roots through the OP CrossDomainMessenger.\\n        uint32 gasLimit = L2_BEACON_ROOTS_SET_GAS_LIMIT_WHEN_WARM;\\n        if (isToBeSet) {\\n            gasLimit = L2_BEACON_ROOTS_SET_GAS_LIMIT_WHEN_COLD;\\n        }\\n\\n        // Send the beacon block root to the L2\\n        IL1CrossDomainMessenger(MESSENGER).sendMessage(\\n            address(L2_BEACON_ROOTS), abi.encodeCall(IL2BeaconRoots.set, (_timestamp, _beaconRoot)), gasLimit\\n        );\\n\\n        // Emit BlockRootSent event\\n        emit BlockRootSent(_timestamp, _beaconRoot);\\n    }\\n\\n    /// @inheritdoc IL1BeaconRootsSender\\n    function getCrossDomainMessenger() external view returns (address) {\\n        return MESSENGER;\\n    }\\n\\n    /// @inheritdoc IL1BeaconRootsSender\\n    function getL2BeaconRoots() external view returns (address) {\\n        return L2_BEACON_ROOTS;\\n    }\\n}\\n\",\"keccak256\":\"0x9b1731fbab33cdb64b329b081c824abb5ef07702ae34567a094fcf2826698135\",\"license\":\"MIT\"},\"contracts/src/interfaces/IL1BeaconRootsSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title IL1BeaconRootsSender\\n/// @notice The L1BeaconRootsSender contract sends the beacon chain block roots to the L2BeaconRoots contract on the L2\\ninterface IL1BeaconRootsSender {\\n    /// @notice Event emitted when a block root is sent to the L2\\n    /// @notice The event can be emitted multiple times for the same block root\\n    /// @notice The event can be emitted for block roots in the past\\n    /// @notice The protocol does not guarantee that the event is emitted for every block root\\n    /// @param timestamp: The timestamp of the beacon chain block\\n    /// @param blockRoot: The beacon chain block root at the given timestamp\\n    event BlockRootSent(uint256 timestamp, bytes32 blockRoot);\\n\\n    /// @notice Timestamp out of range for the the beacon roots buffer ring.\\n    error TimestampOutOfRing();\\n\\n    /// @notice Timestamp is in the future\\n    error TimestampInTheFuture();\\n\\n    /// @notice Beacont root is missing for the given timestamp.\\n    error BeaconRootMissing();\\n\\n    /// @notice Sends a beacon block root to the L2\\n    /// @notice Retrieves the block root from the official beacon roots contract and sends it to the L2\\n    /// @param _timestamp: The timestamp of the beacon chain block\\n    function sendBlockRoot(uint256 _timestamp) external;\\n\\n    /// @notice Sends beacon block root of the current block to the L2\\n    /// @notice Retrieves the block root from the official beacon roots contract and sends it to the L2\\n    /// @notice The beacon block root is for the parent beacon chain slot of the current block\\n    function sendCurrentBlockRoot() external;\\n\\n    /// @notice Retrieves the address of the CrossDomainMessenger contract on the L1\\n    function getCrossDomainMessenger() external view returns (address);\\n\\n    /// @notice Retrieves the address of the L2BeaconRoots contract on the L2\\n    function getL2BeaconRoots() external view returns (address);\\n}\\n\",\"keccak256\":\"0x337c6c3ac535297fc499b0de30d91647b6b40565b1ff49929e3220621bc53d1c\",\"license\":\"MIT\"},\"contracts/src/interfaces/IL1CrossDomainMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title IL1CrossDomainMessenger\\n/// @notice Interface of the OP CrossDomainMessenger contract on the L1\\ninterface IL1CrossDomainMessenger {\\n    function sendMessage(address _target, bytes calldata _message, uint32 _gasLimit) external;\\n}\\n\",\"keccak256\":\"0xef8958dce11cb95dc70caae0a0cc5941b1a3780c15080874e3d380e5ee25b444\",\"license\":\"MIT\"},\"contracts/src/interfaces/IL2BeaconRoots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title IL2BeaconRoots\\n/// @notice The interface of the L2BeaconRoots contract stores the beacon chain block roots on the L2\\ninterface IL2BeaconRoots {\\n    /// @notice Event emitted when the smart contract is initialized\\n    /// @param _l1BeaconRootsSender: The address of the L1BeaconRootsSender contract on L1\\n    event Initialized(address _l1BeaconRootsSender);\\n\\n    /// @notice Event emitted when a beacon block root is set\\n    /// @notice The event can be emitted multiple times for the same block root\\n    /// @notice The event can be emitted for block roots in the past\\n    /// @notice The protocol does not guarantee that the event is emitted for every block root\\n    /// @param timestamp: The timestamp of the beacon chain block\\n    /// @param blockRoot: The beacon chain block root at the given timestamp\\n    event BeaconRootSet(uint256 timestamp, bytes32 blockRoot);\\n\\n    /// @notice Initialize the contract with the L1BeaconRootsSender address.\\n    /// @param _l1BeaconRootsSender: The address of the L1BeaconRootsSender contract\\n    /// @dev The flow is:\\n    ///       1) Deploy L2BeaconRoots on L2\\n    ///       2) Deploy L1BeaconRootsSender on L1 (passing the address of the deployed L2BeaconRoots to the constructor)\\n    ///       3) Initialize L2BeaconRoots with the L1BeaconRootsSender address\\n    function init(address _l1BeaconRootsSender) external;\\n\\n    /// @notice Sets the beacon root for a given beacon chain timestamp\\n    /// @notice This function must be called by the L1BeaconRootsSender contract on L1 through the OP CrossDomainMessenger\\n    /// @param _beaconTimestamp: The timestamp of the beacon chain block\\n    /// @param _beaconRoot: The beacon chain block root at the given timestamp\\n    function set(uint256 _beaconTimestamp, bytes32 _beaconRoot) external;\\n\\n    /// @notice Gets the beacon root for a given beacon chain timestamp\\n    /// @param _beacon_timestamp: The timestamp of the beacon chain block\\n    function get(uint256 _beacon_timestamp) external view returns (bytes32);\\n\\n    /// @notice Retrieves the address of the CrossDomainMessenger contract on the L2\\n    function getCrossDomainMessenger() external view returns (address);\\n\\n    /// @notice Retrieves the address of the L1BeaconRootsSender contract on the L1\\n    function getL1BeaconRootsSender() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7d5f1b95fac42459f536ee2af4e20c3bb5dc3e846ea459561cc3c2939e11ed92\",\"license\":\"MIT\"},\"contracts/src/libraries/BeaconRoots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title SSZMerkleProof\\n/// @notice Library for verifying SSZ Merkle proofs\\nlibrary BeaconRoots {\\n    function _get(address _beaconRoots, uint256 _timestamp) internal view returns (bytes32) {\\n        (bool success, bytes memory result) = _beaconRoots.staticcall(abi.encode(_timestamp));\\n        if (success && result.length > 0) {\\n            return abi.decode(result, (bytes32));\\n        } else {\\n            return bytes32(0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d8f1feb9418fb2678fb6ccd9562cec125d293e59ca65f265b188041b8708ea3\",\"license\":\"MIT\"},\"contracts/src/state/BeaconRootsRingTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title BeaconRootsBuffer Storage\\n/// @notice Utility to track the state of the L2BeaconRoots ring buffer\\nlibrary BeaconRootsRingTracker {\\n    /// @notice Storage slot of the buffer\\n    bytes32 internal constant RING_TRACKER_SLOT = bytes32(uint256(keccak256(\\\"beaconRootsSender.state.ringTracker\\\")) - 1);\\n\\n    /// @notice Structure of the buffer in storage\\n    struct Slot {\\n        uint256[32] value;\\n    }\\n\\n    /// @notice Check if a ring buffer index was already marked\\n    /// @param _ringIdx: The ring buffer index, it must be within the history buffer length (0 <= _ringIdx < HISTORY_BUFFER_LENGTH)\\n    function _isMarked(uint256 _ringIdx) internal view returns (bool) {\\n        bytes32 slot = RING_TRACKER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        (uint256 trackerIdx, uint256 bitIdx) = _position(_ringIdx);\\n\\n        return r.value[trackerIdx] & (1 << bitIdx) > 0;\\n    }\\n\\n    /// @notice Mark a ring buffer index if it is was not already marked\\n    /// @param _ringIdx: The ring buffer index, it must be within the history buffer length (0 <= _ringIdx < HISTORY_BUFFER_LENGTH)\\n    /// @return true if the marking happen, or false if the index was already marked\\n    function _markIfNotYetMarked(uint256 _ringIdx) internal returns (bool) {\\n        bytes32 slot = RING_TRACKER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        /// Check if the ring index is already marked\\n        (uint256 trackerIdx, uint256 bitIdx) = _position(_ringIdx);\\n        if (r.value[trackerIdx] & (1 << bitIdx) > 0) {\\n            return false;\\n        }\\n\\n        ///  Mark the ring index if it is not already marked\\n        ///  Note:\\n        ///  - This is the expensive part of the operation as it requires an SSTORE operation\\n        ///  - In most cases, this will re-write a storage slot that was already marked for a neighboring ring index, thus reducing gas cost\\n        r.value[trackerIdx] |= (1 << bitIdx);\\n\\n        return true;\\n    }\\n\\n    function _position(uint256 _ringIdx) private pure returns (uint256, uint256) {\\n        return (_ringIdx / 256, _ringIdx % 256);\\n    }\\n}\\n\",\"keccak256\":\"0x2b7b35cfc722b546ed62b5312aec85e44299e1dc20fd49414b3436e0a3ce6071\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c03461008657601f6105ca38819003918201601f19168301916001600160401b0383118484101761008b57808492604094855283398101031261008657610052602061004b836100a1565b92016100a1565b9060805260a05260405161051490816100b68239608051818181606201526101c9015260a05181818160a9015261023e0152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100865756fe6040608081526004908136101561001557600080fd5b600091823560e01c9081634c548fa414610168578163d9ddd640146100d857508063dcecc30d146100955763f675fa621461004f57600080fd5b34610091578160031936011261009157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b5034610091578160031936011261009157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b838334610091576020366003190112610091578235428111610158578042034281116101455762017ff411156101355761011181610361565b918215610126575090610123916101a6565b80f35b51631e1393c960e21b81528490fd5b8151633d3d53cd60e21b81528490fd5b634e487b7160e01b845260118552602484fd5b815163173a7be760e31b81528490fd5b9050346101a257826003193601126101a25761018342610361565b918215610195578361012384426101a6565b51631e1393c960e21b8152fd5b8280fd5b906101b4611fff830661048c565b91613a9892610357575b60018060a01b0391827f000000000000000000000000000000000000000000000000000000000000000016604093845191602092633262778d60e11b8482015285602482015284604482015260448152608081019767ffffffffffffffff891193828a10851761031857898952833b1561035257633dbb202b60e01b8a527f0000000000000000000000000000000000000000000000000000000000000000166084830152606060a4830152815160e483018190528992918660005b8381106103395750506084838363ffffffff6000989694896101048a9882980101521660c4830152601f801991011681010301925af1801561032e576102ea575b507f4380331b13b9b22cafadc0bee4406bcf94ecb26bd720c64724f8fb495760a4b594508351928352820152a1565b610318577f4380331b13b9b22cafadc0bee4406bcf94ecb26bd720c64724f8fb495760a4b5948452386102bb565b634e487b7160e01b600052604160045260246000fd5b85513d6000823e3d90fd5b80850180830151610104909101528c955088910161027a565b600080fd5b61c35092506101be565b604080516020808201938452815267ffffffffffffffff9291810183811182821017610318576040526000809281925190720f3df6d732807ef1319fb7b8bb8522d0beac025afa3d1561043c573d8381116104285760405193601f8201601f19908116603f01168501908111858210176104145760405283523d82602085013e5b8061040a575b156104055760208280518101031261040257506020015190565b80fd5b905090565b50815115156103e8565b634e487b7160e01b84526041600452602484fd5b634e487b7160e01b83526041600452602483fd5b606092506103e2565b6020811015610476577f9bb4c3dbeacb2037aa5e0013b1b00d2951f101555d522a79ec9d5b7dd11c50a20190600090565b634e487b7160e01b600052603260045260246000fd5b8060081c60ff600161049d83610445565b92905494161b92839160031b1c166104d7576104b890610445565b819291549060031b9181831c17821b91600019901b1916179055600190565b505060009056fea2646970667358221220616a91cc146b694abd69b0e0de38f498e34fe730a732bb4915b9441ceced7cfb64736f6c63430008140033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c9081634c548fa414610168578163d9ddd640146100d857508063dcecc30d146100955763f675fa621461004f57600080fd5b34610091578160031936011261009157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b5034610091578160031936011261009157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b838334610091576020366003190112610091578235428111610158578042034281116101455762017ff411156101355761011181610361565b918215610126575090610123916101a6565b80f35b51631e1393c960e21b81528490fd5b8151633d3d53cd60e21b81528490fd5b634e487b7160e01b845260118552602484fd5b815163173a7be760e31b81528490fd5b9050346101a257826003193601126101a25761018342610361565b918215610195578361012384426101a6565b51631e1393c960e21b8152fd5b8280fd5b906101b4611fff830661048c565b91613a9892610357575b60018060a01b0391827f000000000000000000000000000000000000000000000000000000000000000016604093845191602092633262778d60e11b8482015285602482015284604482015260448152608081019767ffffffffffffffff891193828a10851761031857898952833b1561035257633dbb202b60e01b8a527f0000000000000000000000000000000000000000000000000000000000000000166084830152606060a4830152815160e483018190528992918660005b8381106103395750506084838363ffffffff6000989694896101048a9882980101521660c4830152601f801991011681010301925af1801561032e576102ea575b507f4380331b13b9b22cafadc0bee4406bcf94ecb26bd720c64724f8fb495760a4b594508351928352820152a1565b610318577f4380331b13b9b22cafadc0bee4406bcf94ecb26bd720c64724f8fb495760a4b5948452386102bb565b634e487b7160e01b600052604160045260246000fd5b85513d6000823e3d90fd5b80850180830151610104909101528c955088910161027a565b600080fd5b61c35092506101be565b604080516020808201938452815267ffffffffffffffff9291810183811182821017610318576040526000809281925190720f3df6d732807ef1319fb7b8bb8522d0beac025afa3d1561043c573d8381116104285760405193601f8201601f19908116603f01168501908111858210176104145760405283523d82602085013e5b8061040a575b156104055760208280518101031261040257506020015190565b80fd5b905090565b50815115156103e8565b634e487b7160e01b84526041600452602484fd5b634e487b7160e01b83526041600452602483fd5b606092506103e2565b6020811015610476577f9bb4c3dbeacb2037aa5e0013b1b00d2951f101555d522a79ec9d5b7dd11c50a20190600090565b634e487b7160e01b600052603260045260246000fd5b8060081c60ff600161049d83610445565b92905494161b92839160031b1c166104d7576104b890610445565b819291549060031b9181831c17821b91600019901b1916179055600190565b505060009056fea2646970667358221220616a91cc146b694abd69b0e0de38f498e34fe730a732bb4915b9441ceced7cfb64736f6c63430008140033",
  "devdoc": {
    "events": {
      "BlockRootSent(uint256,bytes32)": {
        "params": {
          "blockRoot": ": The beacon chain block root at the given timestamp",
          "timestamp": ": The timestamp of the beacon chain block"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_l2BeaconRoots": ": The address of the L2BeaconRoots contract on the L2",
          "_messenger": ": The address of the CrossDomainMessenger contract on the L1"
        }
      },
      "sendBlockRoot(uint256)": {
        "params": {
          "_timestamp": ": The timestamp of the beacon chain block"
        }
      }
    },
    "stateVariables": {
      "BEACON_ROOTS": {
        "details": "https://eips.ethereum.org/EIPS/eip-4788"
      },
      "BEACON_ROOTS_HISTORY_BUFFER_LENGTH": {
        "details": "https://eips.ethereum.org/EIPS/eip-4788"
      }
    },
    "title": "L1BeaconRootsSender",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "BeaconRootMissing()": [
        {
          "notice": "Beacont root is missing for the given timestamp."
        }
      ],
      "TimestampInTheFuture()": [
        {
          "notice": "Timestamp is in the future"
        }
      ],
      "TimestampOutOfRing()": [
        {
          "notice": "Timestamp out of range for the the beacon roots buffer ring."
        }
      ]
    },
    "events": {
      "BlockRootSent(uint256,bytes32)": {
        "notice": "Event emitted when a block root is sent to the L2The event can be emitted multiple times for the same block rootThe event can be emitted for block roots in the pastThe protocol does not guarantee that the event is emitted for every block root"
      }
    },
    "kind": "user",
    "methods": {
      "getCrossDomainMessenger()": {
        "notice": "Retrieves the address of the CrossDomainMessenger contract on the L1"
      },
      "getL2BeaconRoots()": {
        "notice": "Retrieves the address of the L2BeaconRoots contract on the L2"
      },
      "sendBlockRoot(uint256)": {
        "notice": "Sends a beacon block root to the L2Retrieves the block root from the official beacon roots contract and sends it to the L2"
      },
      "sendCurrentBlockRoot()": {
        "notice": "Sends beacon block root of the current block to the L2Retrieves the block root from the official beacon roots contract and sends it to the L2The beacon block root is for the parent beacon chain slot of the current block"
      }
    },
    "notice": "The L1BeaconRootsSender contract sends the beacon chain block roots to the L2BeaconRoots contract on the L2",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}