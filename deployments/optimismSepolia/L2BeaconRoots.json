{
  "address": "0x716d304cA10a4e8f418FeFC9c4E008EDDdd752bE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messenger",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "blockRoot",
          "type": "bytes32"
        }
      ],
      "name": "BeaconRootSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_l1BeaconRootsSender",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_beacon_timestamp",
          "type": "uint256"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCrossDomainMessenger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getL1BeaconRootsSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1BeaconRootsSender",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_beaconTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_beaconRoot",
          "type": "bytes32"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c9b0654a14f7b587d5248c9f02203fd166d23fd43fe8766fe4899a5a1189dc6",
  "receipt": {
    "to": null,
    "from": "0xFD94B77dEf93B655b37F149d58cb3AD21743180F",
    "contractAddress": "0x716d304cA10a4e8f418FeFC9c4E008EDDdd752bE",
    "transactionIndex": 6,
    "gasUsed": "362778",
    "logsBloom": "0x
    "blockHash": "0x19dbc0170f55db9f9a39936d9b883acd8ddfab34768722fbc3f2621f7bfd9045",
    "transactionHash": "0x8c9b0654a14f7b587d5248c9f02203fd166d23fd43fe8766fe4899a5a1189dc6",
    "logs": [],
    "blockNumber": 17746143,
    "cumulativeGasUsed": "1722738",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4200000000000000000000000000000000000007"
  ],
  "numDeployments": 1,
  "solcInputHash": "e2dbfeb055bcb7180044bb2e108cbea3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messenger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockRoot\",\"type\":\"bytes32\"}],\"name\":\"BeaconRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_l1BeaconRootsSender\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_beacon_timestamp\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCrossDomainMessenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1BeaconRootsSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1BeaconRootsSender\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_beaconTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_beaconRoot\",\"type\":\"bytes32\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"BeaconRootSet(uint256,bytes32)\":{\"params\":{\"blockRoot\":\": The beacon chain block root at the given timestamp\",\"timestamp\":\": The timestamp of the beacon chain block\"}},\"Initialized(address)\":{\"params\":{\"_l1BeaconRootsSender\":\": The address of the L1BeaconRootsSender contract on L1\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_messenger\":\": The address of the L2 CrossDomainMessenger contract\"}},\"get(uint256)\":{\"params\":{\"_beacon_timestamp\":\": The timestamp of the beacon chain block\"}},\"init(address)\":{\"details\":\"The flow is:       1) Deploy L2BeaconRoots on L2       2) Deploy L1BeaconRootsSender on L1 (passing the address of the deployed L2BeaconRoots to the constructor)       3) Initialize L2BeaconRoots with the L1BeaconRootsSender address\",\"params\":{\"_l1BeaconRootsSender\":\": The address of the L1BeaconRootsSender contract\"}},\"set(uint256,bytes32)\":{\"params\":{\"_beaconRoot\":\": The beacon chain block root at the given timestamp\",\"_beaconTimestamp\":\": The timestamp of the beacon chain block\"}}},\"title\":\"L2BeaconRoots\",\"version\":1},\"userdoc\":{\"events\":{\"BeaconRootSet(uint256,bytes32)\":{\"notice\":\"Event emitted when a beacon block root is setThe event can be emitted multiple times for the same block rootThe event can be emitted for block roots in the pastThe protocol does not guarantee that the event is emitted for every block root\"},\"Initialized(address)\":{\"notice\":\"Event emitted when the smart contract is initialized\"}},\"kind\":\"user\",\"methods\":{\"get(uint256)\":{\"notice\":\"Gets the beacon root for a given beacon chain timestamp\"},\"getCrossDomainMessenger()\":{\"notice\":\"Retrieves the address of the CrossDomainMessenger contract on the L2\"},\"getL1BeaconRootsSender()\":{\"notice\":\"Retrieves the address of the L1BeaconRootsSender contract on the L1\"},\"init(address)\":{\"notice\":\"Initialize the contract with the L1BeaconRootsSender address.\"},\"set(uint256,bytes32)\":{\"notice\":\"Sets the beacon root for a given beacon chain timestampThis function must be called by the L1BeaconRootsSender contract on L1 through the OP CrossDomainMessenger\"}},\"notice\":\"The L2BeaconRoots contract stores the beacon chain block roots on the L2         It uses a ring buffer to store the block roots for up to the last 8191 beacon chain blocks\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/L2BeaconRoots.sol\":\"L2BeaconRoots\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/src/L2BeaconRoots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interfaces/IL2CrossDomainMessenger.sol\\\";\\nimport \\\"./interfaces/IL1BeaconRootsSender.sol\\\";\\nimport \\\"./interfaces/IL2BeaconRoots.sol\\\";\\nimport \\\"./state/BeaconRootsBuffer.sol\\\";\\n\\n/// @title L2BeaconRoots\\n/// @notice The L2BeaconRoots contract stores the beacon chain block roots on the L2\\n///         It uses a ring buffer to store the block roots for up to the last 8191 beacon chain blocks\\ncontract L2BeaconRoots is IL2BeaconRoots {\\n    /// @notice The L1CrossDomainMessenger contract\\n    address internal immutable MESSENGER;\\n\\n    /// @notice The L1BeaconRootsSender contract on the L1\\n    address internal L1_BEACON_ROOTS_SENDER;\\n\\n    /// @param _messenger: The address of the L2 CrossDomainMessenger contract\\n    constructor(address _messenger) {\\n        MESSENGER = _messenger;\\n    }\\n\\n    /// @inheritdoc IL2BeaconRoots\\n    function init(address _l1BeaconRootsSender) public {\\n        require(L1_BEACON_ROOTS_SENDER == address(0), \\\"BeaconRoots: Contract has already been initialized\\\");\\n        L1_BEACON_ROOTS_SENDER = _l1BeaconRootsSender;\\n        emit Initialized(_l1BeaconRootsSender);\\n    }\\n\\n    /// @inheritdoc IL2BeaconRoots\\n    function set(uint256 _beaconTimestamp, bytes32 _beaconRoot) public {\\n        require(msg.sender == MESSENGER, \\\"BeaconRoots: Direct sender must be the CrossDomainMessenger\\\");\\n\\n        require(\\n            IL2CrossDomainMessenger(MESSENGER).xDomainMessageSender() == L1_BEACON_ROOTS_SENDER,\\n            \\\"BeaconRoots: Remote sender must be the Beacon Roots Sender contract\\\"\\n        );\\n\\n        _set(_beaconTimestamp, _beaconRoot);\\n    }\\n\\n    /// @inheritdoc IL2BeaconRoots\\n    function get(uint256 _beacon_timestamp) public view returns (bytes32) {\\n        return _get(_beacon_timestamp);\\n    }\\n\\n    /// @inheritdoc IL2BeaconRoots\\n    function getCrossDomainMessenger() external view returns (address) {\\n        return MESSENGER;\\n    }\\n\\n    /// @inheritdoc IL2BeaconRoots\\n    function getL1BeaconRootsSender() external view returns (address) {\\n        return L1_BEACON_ROOTS_SENDER;\\n    }\\n\\n    /// @notice Set a beacon block root\\n    /// @param _beaconTimestamp: The timestamp of the beacon block\\n    function _set(uint256 _beaconTimestamp, bytes32 _beaconRoot) internal {\\n        BeaconRootsBuffer._set(_beaconTimestamp, _beaconRoot);\\n        emit BeaconRootSet(_beaconTimestamp, _beaconRoot);\\n    }\\n\\n    /// @notice Retrieves a beacon block root\\n    /// @param _beaconTimestamp: The timestamp of the beacon block\\n    function _get(uint256 _beaconTimestamp) internal view returns (bytes32) {\\n        return BeaconRootsBuffer._get(_beaconTimestamp);\\n    }\\n\\n    /// @notice Fallback function mirorring the official BeaconRoots contract (EIP-4788)\\n    /// @notice It expects calldata to be a beacon root timestamp encoded on 32 bytes and\\n    ///         it returns a bytes32 beacon root\\n    fallback() external {\\n        // If calldata is not 32 bytes long, revert\\n        require(msg.data.length == 32, \\\"BeaconRoots: Invalid function selector\\\");\\n\\n        // Convert the call data to a uint256\\n        uint256 beaconTimestamp;\\n        assembly {\\n            beaconTimestamp := calldataload(0)\\n        }\\n\\n        // Retrieve the beacon root\\n        bytes32 beaconRoot = _get(beaconTimestamp);\\n\\n        // Return the beacon root\\n        assembly {\\n            mstore(0, beaconRoot)\\n            return(0, 32)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79f8a64fb85a893373154060827f8c1b545fa61e6a19e1f2edda2f702c06a7a0\",\"license\":\"MIT\"},\"contracts/src/interfaces/IL1BeaconRootsSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title IL1BeaconRootsSender\\n/// @notice The L1BeaconRootsSender contract sends the beacon chain block roots to the L2BeaconRoots contract on the L2\\ninterface IL1BeaconRootsSender {\\n    /// @notice Event emitted when a block root is sent to the L2\\n    /// @notice The event can be emitted multiple times for the same block root\\n    /// @notice The event can be emitted for block roots in the past\\n    /// @notice The protocol does not guarantee that the event is emitted for every block root\\n    /// @param timestamp: The timestamp of the beacon chain block\\n    /// @param blockRoot: The beacon chain block root at the given timestamp\\n    event BlockRootSent(uint256 timestamp, bytes32 blockRoot);\\n\\n    /// @notice Timestamp out of range for the the beacon roots buffer ring.\\n    error TimestampOutOfRing();\\n\\n    /// @notice Timestamp is in the future\\n    error TimestampInTheFuture();\\n\\n    /// @notice Beacont root is missing for the given timestamp.\\n    error BeaconRootMissing();\\n\\n    /// @notice Sends a beacon block root to the L2\\n    /// @notice Retrieves the block root from the official beacon roots contract and sends it to the L2\\n    /// @param _timestamp: The timestamp of the beacon chain block\\n    function sendBlockRoot(uint256 _timestamp) external;\\n\\n    /// @notice Sends beacon block root of the current block to the L2\\n    /// @notice Retrieves the block root from the official beacon roots contract and sends it to the L2\\n    /// @notice The beacon block root is for the parent beacon chain slot of the current block\\n    function sendCurrentBlockRoot() external;\\n\\n    /// @notice Retrieves the address of the CrossDomainMessenger contract on the L1\\n    function getCrossDomainMessenger() external view returns (address);\\n\\n    /// @notice Retrieves the address of the L2BeaconRoots contract on the L2\\n    function getL2BeaconRoots() external view returns (address);\\n}\\n\",\"keccak256\":\"0x337c6c3ac535297fc499b0de30d91647b6b40565b1ff49929e3220621bc53d1c\",\"license\":\"MIT\"},\"contracts/src/interfaces/IL2BeaconRoots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title IL2BeaconRoots\\n/// @notice The interface of the L2BeaconRoots contract stores the beacon chain block roots on the L2\\ninterface IL2BeaconRoots {\\n    /// @notice Event emitted when the smart contract is initialized\\n    /// @param _l1BeaconRootsSender: The address of the L1BeaconRootsSender contract on L1\\n    event Initialized(address _l1BeaconRootsSender);\\n\\n    /// @notice Event emitted when a beacon block root is set\\n    /// @notice The event can be emitted multiple times for the same block root\\n    /// @notice The event can be emitted for block roots in the past\\n    /// @notice The protocol does not guarantee that the event is emitted for every block root\\n    /// @param timestamp: The timestamp of the beacon chain block\\n    /// @param blockRoot: The beacon chain block root at the given timestamp\\n    event BeaconRootSet(uint256 timestamp, bytes32 blockRoot);\\n\\n    /// @notice Initialize the contract with the L1BeaconRootsSender address.\\n    /// @param _l1BeaconRootsSender: The address of the L1BeaconRootsSender contract\\n    /// @dev The flow is:\\n    ///       1) Deploy L2BeaconRoots on L2\\n    ///       2) Deploy L1BeaconRootsSender on L1 (passing the address of the deployed L2BeaconRoots to the constructor)\\n    ///       3) Initialize L2BeaconRoots with the L1BeaconRootsSender address\\n    function init(address _l1BeaconRootsSender) external;\\n\\n    /// @notice Sets the beacon root for a given beacon chain timestamp\\n    /// @notice This function must be called by the L1BeaconRootsSender contract on L1 through the OP CrossDomainMessenger\\n    /// @param _beaconTimestamp: The timestamp of the beacon chain block\\n    /// @param _beaconRoot: The beacon chain block root at the given timestamp\\n    function set(uint256 _beaconTimestamp, bytes32 _beaconRoot) external;\\n\\n    /// @notice Gets the beacon root for a given beacon chain timestamp\\n    /// @param _beacon_timestamp: The timestamp of the beacon chain block\\n    function get(uint256 _beacon_timestamp) external view returns (bytes32);\\n\\n    /// @notice Retrieves the address of the CrossDomainMessenger contract on the L2\\n    function getCrossDomainMessenger() external view returns (address);\\n\\n    /// @notice Retrieves the address of the L1BeaconRootsSender contract on the L1\\n    function getL1BeaconRootsSender() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7d5f1b95fac42459f536ee2af4e20c3bb5dc3e846ea459561cc3c2939e11ed92\",\"license\":\"MIT\"},\"contracts/src/interfaces/IL2CrossDomainMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title IL2CrossDomainMessenger\\n/// @notice Interface for the OP CrossDomainMessenger contract on L2\\ninterface IL2CrossDomainMessenger {\\n    function xDomainMessageSender() external view returns (address);\\n}\\n\",\"keccak256\":\"0x47ea6cb429441bc978a69344bb0709cb1fe220d8b844ae78f8dcb52ad38b9327\",\"license\":\"MIT\"},\"contracts/src/state/BeaconRootsBuffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title BeaconRootsBuffer Storage\\n/// @notice Utility to manage the BeaconRootsBuffer in storage.\\n/// @notice It keeps a history of beacon roots for 8191 blocks which is around 1 day.\\n///         The buffer enables to save gas by rewriting beaconRoots on warm storage slots.\\nlibrary BeaconRootsBuffer {\\n    /// @notice Storage slot of the buffer\\n    bytes32 internal constant BUFFER_SLOT = bytes32(uint256(keccak256(\\\"beaconRoots.state.buffer\\\")) - 1);\\n\\n    /// @notice Length of the history buffer\\n    uint256 internal constant HISTORY_BUFFER_LENGTH = 8191;\\n\\n    /// @notice Structure of the buffer in storage\\n    struct Slot {\\n        mapping(uint256 => uint256) value;\\n    }\\n\\n    /// @notice Set a beacon root in the buffer\\n    /// @param _timestamp The timestamp of the beacon root\\n    /// @param _beaconRoot The beacon root\\n    function _set(uint256 _timestamp, bytes32 _beaconRoot) internal {\\n        bytes32 slot = BUFFER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 timestamp_idx = _timestamp % HISTORY_BUFFER_LENGTH;\\n        uint256 root_idx = timestamp_idx + HISTORY_BUFFER_LENGTH;\\n        r.value[timestamp_idx] = _timestamp;\\n        r.value[root_idx] = uint256(_beaconRoot);\\n    }\\n\\n    /// @notice Get a beacon root from the buffer\\n    /// @param _timestamp The timestamp of the beacon root\\n    /// @return beaconRoot The beacon root if found, otherwise 0\\n    function _get(uint256 _timestamp) internal view returns (bytes32 beaconRoot) {\\n        bytes32 slot = BUFFER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 timestamp_idx = _timestamp % HISTORY_BUFFER_LENGTH;\\n        uint256 root_idx = timestamp_idx + HISTORY_BUFFER_LENGTH;\\n\\n        uint256 bufferTimestamp = r.value[timestamp_idx];\\n        if (bufferTimestamp == _timestamp) {\\n            beaconRoot = bytes32(r.value[root_idx]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1aed3b1024e8992f708cf47b8be8a4070bc422dd0693d1c15f979e210e01ec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a03461007157601f61062038819003918201601f19168301916001600160401b038311848410176100765780849260209460405283398101031261007157516001600160a01b038116810361007157608052604051610593908161008d823960805181818161019f01526102f50152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001a575b341561047d575b600080fd5b6000803560e01c908162fbba5d1461006c5750806319ab453c1461006757806364c4ef1a146100625780639507d39a1461005d5763f675fa620361000e576102df565b6102b9565b610184565b6100a4565b34610090578060031936011261009057546001600160a01b03166080908152602090f35b80fd5b6001600160a01b0381160361001557565b34610015576020366003190112610015576004356100c181610093565b600054906001600160a01b0390818316610124576001600160a01b0319909216908216176000556040516001600160a01b0390911681527f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e69080602081010390a1005b60405162461bcd60e51b815260206004820152603260248201527f426561636f6e526f6f74733a20436f6e74726163742068617320616c726561646044820152711e481899595b881a5b9a5d1a585b1a5e995960721b6064820152608490fd5b34610015576040366003190112610015576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116903382900361024e57602060049260405193848092636e296e4560e01b82525afa9081156102495761020992600092610219575b506000546001600160a01b0316911614610380565b6102176024356004356103fe565b005b61023b91925060203d8111610242575b6102338183610324565b81019061035c565b90386101f4565b503d610229565b610374565b60405162461bcd60e51b815260206004820152603b60248201527f426561636f6e526f6f74733a204469726563742073656e646572206d7573742060448201527f6265207468652043726f7373446f6d61696e4d657373656e67657200000000006064820152608490fd5b346100155760203660031901126100155760206102d7600435610503565b604051908152f35b34610015576000366003190112610015576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff82111761034657604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610015575161037181610093565b90565b6040513d6000823e3d90fd5b1561038757565b60405162461bcd60e51b815260206004820152604360248201527f426561636f6e526f6f74733a2052656d6f74652073656e646572206d7573742060448201527f62652074686520426561636f6e20526f6f74732053656e64657220636f6e74726064820152621858dd60ea1b608482015260a490fd5b611fff9081810691820192838311610478577fd5455eaa0f2b65a83ae25b3ba4569cff09ced4128806688b825c1f9e4fd16f39936040936000527fe86309630a2abec088d5b96b65e4f174653522755626d469c576bd2ca75f209e60205282846000205560005280836000205582519182526020820152a1565b6104ed565b6020360361049957610490600035610503565b60005260206000f35b60405162461bcd60e51b815260206004820152602660248201527f426561636f6e526f6f74733a20496e76616c69642066756e6374696f6e2073656044820152653632b1ba37b960d11b6064820152608490fd5b634e487b7160e01b600052601160045260246000fd5b90600091611fff9081810691820191828111610478576000527fe86309630a2abec088d5b96b65e4f174653522755626d469c576bd2ca75f209e6020526040600020541461054e5750565b9091506000526040600020549056fea2646970667358221220b3b9e217dbd1d086da741d6043b9f3d18783d158c0580ecf773ef3403bb80dd264736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001a575b341561047d575b600080fd5b6000803560e01c908162fbba5d1461006c5750806319ab453c1461006757806364c4ef1a146100625780639507d39a1461005d5763f675fa620361000e576102df565b6102b9565b610184565b6100a4565b34610090578060031936011261009057546001600160a01b03166080908152602090f35b80fd5b6001600160a01b0381160361001557565b34610015576020366003190112610015576004356100c181610093565b600054906001600160a01b0390818316610124576001600160a01b0319909216908216176000556040516001600160a01b0390911681527f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e69080602081010390a1005b60405162461bcd60e51b815260206004820152603260248201527f426561636f6e526f6f74733a20436f6e74726163742068617320616c726561646044820152711e481899595b881a5b9a5d1a585b1a5e995960721b6064820152608490fd5b34610015576040366003190112610015576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116903382900361024e57602060049260405193848092636e296e4560e01b82525afa9081156102495761020992600092610219575b506000546001600160a01b0316911614610380565b6102176024356004356103fe565b005b61023b91925060203d8111610242575b6102338183610324565b81019061035c565b90386101f4565b503d610229565b610374565b60405162461bcd60e51b815260206004820152603b60248201527f426561636f6e526f6f74733a204469726563742073656e646572206d7573742060448201527f6265207468652043726f7373446f6d61696e4d657373656e67657200000000006064820152608490fd5b346100155760203660031901126100155760206102d7600435610503565b604051908152f35b34610015576000366003190112610015576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff82111761034657604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610015575161037181610093565b90565b6040513d6000823e3d90fd5b1561038757565b60405162461bcd60e51b815260206004820152604360248201527f426561636f6e526f6f74733a2052656d6f74652073656e646572206d7573742060448201527f62652074686520426561636f6e20526f6f74732053656e64657220636f6e74726064820152621858dd60ea1b608482015260a490fd5b611fff9081810691820192838311610478577fd5455eaa0f2b65a83ae25b3ba4569cff09ced4128806688b825c1f9e4fd16f39936040936000527fe86309630a2abec088d5b96b65e4f174653522755626d469c576bd2ca75f209e60205282846000205560005280836000205582519182526020820152a1565b6104ed565b6020360361049957610490600035610503565b60005260206000f35b60405162461bcd60e51b815260206004820152602660248201527f426561636f6e526f6f74733a20496e76616c69642066756e6374696f6e2073656044820152653632b1ba37b960d11b6064820152608490fd5b634e487b7160e01b600052601160045260246000fd5b90600091611fff9081810691820191828111610478576000527fe86309630a2abec088d5b96b65e4f174653522755626d469c576bd2ca75f209e6020526040600020541461054e5750565b9091506000526040600020549056fea2646970667358221220b3b9e217dbd1d086da741d6043b9f3d18783d158c0580ecf773ef3403bb80dd264736f6c63430008140033",
  "devdoc": {
    "events": {
      "BeaconRootSet(uint256,bytes32)": {
        "params": {
          "blockRoot": ": The beacon chain block root at the given timestamp",
          "timestamp": ": The timestamp of the beacon chain block"
        }
      },
      "Initialized(address)": {
        "params": {
          "_l1BeaconRootsSender": ": The address of the L1BeaconRootsSender contract on L1"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_messenger": ": The address of the L2 CrossDomainMessenger contract"
        }
      },
      "get(uint256)": {
        "params": {
          "_beacon_timestamp": ": The timestamp of the beacon chain block"
        }
      },
      "init(address)": {
        "details": "The flow is:       1) Deploy L2BeaconRoots on L2       2) Deploy L1BeaconRootsSender on L1 (passing the address of the deployed L2BeaconRoots to the constructor)       3) Initialize L2BeaconRoots with the L1BeaconRootsSender address",
        "params": {
          "_l1BeaconRootsSender": ": The address of the L1BeaconRootsSender contract"
        }
      },
      "set(uint256,bytes32)": {
        "params": {
          "_beaconRoot": ": The beacon chain block root at the given timestamp",
          "_beaconTimestamp": ": The timestamp of the beacon chain block"
        }
      }
    },
    "title": "L2BeaconRoots",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BeaconRootSet(uint256,bytes32)": {
        "notice": "Event emitted when a beacon block root is setThe event can be emitted multiple times for the same block rootThe event can be emitted for block roots in the pastThe protocol does not guarantee that the event is emitted for every block root"
      },
      "Initialized(address)": {
        "notice": "Event emitted when the smart contract is initialized"
      }
    },
    "kind": "user",
    "methods": {
      "get(uint256)": {
        "notice": "Gets the beacon root for a given beacon chain timestamp"
      },
      "getCrossDomainMessenger()": {
        "notice": "Retrieves the address of the CrossDomainMessenger contract on the L2"
      },
      "getL1BeaconRootsSender()": {
        "notice": "Retrieves the address of the L1BeaconRootsSender contract on the L1"
      },
      "init(address)": {
        "notice": "Initialize the contract with the L1BeaconRootsSender address."
      },
      "set(uint256,bytes32)": {
        "notice": "Sets the beacon root for a given beacon chain timestampThis function must be called by the L1BeaconRootsSender contract on L1 through the OP CrossDomainMessenger"
      }
    },
    "notice": "The L2BeaconRoots contract stores the beacon chain block roots on the L2         It uses a ring buffer to store the block roots for up to the last 8191 beacon chain blocks",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 325,
        "contract": "contracts/src/L2BeaconRoots.sol:L2BeaconRoots",
        "label": "L1_BEACON_ROOTS_SENDER",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}